#include "breakpoint.h"


#ifndef NOMONITOR	// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

////////////////////////////////////////////////////////////////
// コンストラクタ
////////////////////////////////////////////////////////////////
BPoint::BPoint( void ) : BPNo(BP_NONE), BPData(0), BPStr(NULL), ReqBreak(false), ReqBPNum(0) {}


////////////////////////////////////////////////////////////////
// デストラクタ
////////////////////////////////////////////////////////////////
BPoint::~BPoint( void ){}


////////////////////////////////////////////////////////////////
// ブレークポイントの有無をチェック
////////////////////////////////////////////////////////////////
bool BPoint::ExistBreakPoint( void ) const
{
	for( int i=0; i<NR_BP; i++ )
		if( BP[i].Type != BP_NONE ) return true;
	
	return false;
}


////////////////////////////////////////////////////////////////
// ブレークポイントをチェック
////////////////////////////////////////////////////////////////
bool BPoint::CheckBreakPoint( BPtype type, WORD addr, BYTE data, const char *str )
{
	for( int i=0; i<NR_BP; i++ ){
		if( BP[i].Type == type && BP[i].Addr == addr ){
			BPNo   = i+1;
			BPAddr = addr;
			BPData = data;
			BPStr  = str;
			
			ReqBreak = true;
			ReqBPNum = i;
			
			return true;
		}
	}
	return false;
}


////////////////////////////////////////////////////////////////
// ブレークポイントの情報をクリア
////////////////////////////////////////////////////////////////
void BPoint::ClearStatus( void )
{
	BPNo   = BP_NONE;
	BPAddr = 0;
	BPData = 0;
	BPStr  = NULL;
}


////////////////////////////////////////////////////////////////
// ブレークポイントのタイプを取得
////////////////////////////////////////////////////////////////
BPoint::BPtype BPoint::GetType( int num ) const
{
	return BP[num].Type;
}


////////////////////////////////////////////////////////////////
// ブレークポイントのタイプを設定
////////////////////////////////////////////////////////////////
void BPoint::SetType( int num, BPtype type )
{
	BP[num].Type = type;
}


////////////////////////////////////////////////////////////////
// ブレークポイントのアドレスを取得
////////////////////////////////////////////////////////////////
WORD BPoint::GetAddr( int num ) const
{
	return BP[num].Addr;
}


////////////////////////////////////////////////////////////////
// ブレークポイントのアドレスを設定
////////////////////////////////////////////////////////////////
void BPoint::SetAddr( int num, WORD addr )
{
	BP[num].Addr = addr;
}


////////////////////////////////////////////////////////////////
// ブレーク要求あり?
////////////////////////////////////////////////////////////////
bool BPoint::IsReqBreak( void ) const
{
	return ReqBreak;
}


////////////////////////////////////////////////////////////////
// ブレーク要求のあったブレークポイントNo.を取得
////////////////////////////////////////////////////////////////
int BPoint::GetReqBPNum( void ) const
{
	return ReqBPNum;
}


////////////////////////////////////////////////////////////////
// ブレーク要求キャンセル
////////////////////////////////////////////////////////////////
void BPoint::ResetBreak( void )
{
	ReqBreak = false;
	ReqBPNum = 0;
}


#endif				// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
